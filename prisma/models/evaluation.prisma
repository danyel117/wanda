datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Enum_StudySessionTaskStatus {
    NOT_STARTED
    STARTED
    COMPLETED
    FAILED
}

enum Enum_StudySessionStatus {
    NOT_STARTED
    STARTED
    COMPLETED
}

model StudySessionData {
    id                      String       @id @default(cuid())
    expertConsentBegin      Boolean      @default(false)
    participantConsentBegin Boolean      @default(false)
    currentTask             Int
    evaluationSession       StudySession @relation(fields: [evaluationSessionId], references: [id])
    evaluationSessionId     String       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StudySession {
    id            String                  @id @default(cuid())
    status        Enum_StudySessionStatus @default(NOT_STARTED)
    study         EvaluationStudy         @relation(fields: [studyId], references: [id])
    studyId       String
    expert        User                    @relation(fields: [expertId], references: [id], name: "session-expert")
    expertId      String
    participant   User                    @relation(fields: [participantId], references: [id], name: "session-user")
    participantId String
    data          StudySessionData?
    tasks         StudySessionTask[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StudySessionTask {
    id                  String                      @id @default(cuid())
    status              Enum_StudySessionTaskStatus @default(NOT_STARTED)
    task                Task                        @relation(fields: [taskId], references: [id])
    taskId              String
    session             StudySession                @relation(fields: [evaluationSessionId], references: [id])
    evaluationSessionId String
    expertComments      String?
    userRecording       String?
    expertRecording     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Script {
    id        String            @id @default(cuid())
    name      String            @unique
    script    String            @db.Text
    recording String?
    createdBy User              @relation(fields: [userId], references: [id])
    userId    String
    studies   EvaluationStudy[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id            String             @id @default(cuid())
    description   String             @db.Text
    order         Int                @default(1)
    url           String
    recording     String?
    study         EvaluationStudy    @relation(fields: [studyId], references: [id])
    studyId       String
    studySessions StudySessionTask[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model EvaluationStudy {
    id               String         @id @default(cuid())
    name             String
    site             String
    researchQuestion String
    script           Script         @relation(fields: [scriptId], references: [id])
    scriptId         String
    createdBy        User           @relation(fields: [userId], references: [id], name: "study-expert")
    userId           String         @unique
    participants     User[]         @relation("study-participants")
    sessions         StudySession[]
    tasks            Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id               String            @id @default(cuid())
    isParticipantOf  EvaluationStudy[] @relation("study-participants")
    studies          EvaluationStudy[] @relation("study-expert")
    sessionsAsExpert StudySession[]    @relation("session-expert")
    sessionsAsUser   StudySession[]    @relation("session-user")
    scripts          Script[]
}
