// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Enum_RoleName {
  ADMIN
  EXPERT
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Page {
  id       String  @id @default(cuid())
  name     String  @unique
  route    String  @unique
  isPublic Boolean @default(false)
  roles    Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    String        @id @default(cuid())
  name  Enum_RoleName @unique
  users User[]
  pages Page[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EvaluationSession {
  id       String @id @default(cuid())
  expert   User   @relation(fields: [expertId], references: [id], name: "session-expert")
  expertId String
  user     User   @relation(fields: [userId], references: [id], name: "session-user")
  userId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model Study {
  id           String @id @default(cuid())
  site         String
  createdBy    User   @relation(fields: [userId], references: [id], name: "study-expert")
  userId       String @unique
  participants User[] @relation("study-participants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role?     @relation(fields: [roleId], references: [id])
  accounts      Account[]
  sessions      Session[]
  roleId        String?

  isParticipantOf  Study[]             @relation("study-participants")
  studies          Study[]             @relation("study-expert")
  sessionsAsExpert EvaluationSession[] @relation("session-expert")
  sessionsAsUser   EvaluationSession[] @relation("session-user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
