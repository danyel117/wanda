// ◮◮◮ GENERATED BY AURORA ◮◮◮
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Page {
  id        String   @id @default(cuid())
  name      String   @unique
  route     String   @unique
  isPublic  Boolean  @default(false)
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique
  users     User[]
  pages     Page[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  isParticipantOf  EvaluationStudy[] @relation("study-participants")
  studies          EvaluationStudy[] @relation("study-expert")
  sessionsAsExpert StudySession[]    @relation("session-expert")
  sessionsAsUser   StudySession[]    @relation("session-user")
  scripts          Script[]
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  roles            Role[]
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EvaluationStudy {
  id               String         @id @default(cuid())
  name             String
  site             String
  researchQuestion String
  script           Script         @relation(fields: [scriptId], references: [id])
  scriptId         String
  createdBy        User           @relation(fields: [userId], references: [id], name: "study-expert")
  userId           String         @unique
  participants     User[]         @relation("study-participants")
  sessions         StudySession[]
  tasks            Task[]
  questionnaire    Questionnaire?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Questionnaire {
  id                String           @id @default(cuid())
  evaluationStudy   EvaluationStudy? @relation(fields: [evaluationStudyId], references: [id])
  evaluationStudyId String?          @unique
  questions         Question[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Question {
  id              String             @id @default(cuid())
  position        Int
  sus             Boolean            @default(false)
  question        String
  questionnaire   Questionnaire?     @relation(fields: [questionnaireId], references: [id])
  questionnaireId String?
  responses       QuestionResponse[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model QuestionResponse {
  id             String       @id @default(cuid())
  responseAudio  String?
  responseText   String?
  responseNumber Int?
  session        StudySession @relation(fields: [studySessionId], references: [id])
  studySessionId String
  question       Question     @relation(fields: [questionId], references: [id])
  questionId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model StudySessionData {
  id                      String       @id @default(cuid())
  expertConsentBegin      Boolean      @default(false)
  participantConsentBegin Boolean      @default(false)
  currentTask             Int
  studySession            StudySession @relation(fields: [studySessionId], references: [id])
  studySessionId          String       @unique
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
}

model StudySession {
  id                String                  @id @default(cuid())
  status            Enum_StudySessionStatus @default(NOT_STARTED)
  study             EvaluationStudy         @relation(fields: [studyId], references: [id])
  studyId           String
  expert            User                    @relation(fields: [expertId], references: [id], name: "session-expert")
  expertId          String
  participant       User                    @relation(fields: [participantId], references: [id], name: "session-user")
  participantId     String
  data              StudySessionData?
  tasks             StudySessionTask[]
  questionResponses QuestionResponse[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
}

model StudySessionTask {
  id              String                      @id @default(cuid())
  status          Enum_StudySessionTaskStatus @default(NOT_STARTED)
  task            Task                        @relation(fields: [taskId], references: [id])
  taskId          String
  session         StudySession                @relation(fields: [studySessionId], references: [id])
  studySessionId  String
  expertComments  String?
  userRecording   String?
  expertRecording String?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
}

model Script {
  id        String            @id @default(cuid())
  name      String            @unique
  script    String            @db.Text
  recording String?
  createdBy User              @relation(fields: [userId], references: [id])
  userId    String
  studies   EvaluationStudy[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Task {
  id            String             @id @default(cuid())
  description   String             @db.Text
  order         Int                @default(1)
  url           String
  recording     String?
  study         EvaluationStudy    @relation(fields: [studyId], references: [id])
  studyId       String
  studySessions StudySessionTask[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

enum Enum_RoleName {
  ADMIN
  EXPERT
  PARTICIPANT
}

enum Enum_StudySessionTaskStatus {
  NOT_STARTED
  STARTED
  COMPLETED
  FAILED
}

enum Enum_StudySessionStatus {
  NOT_STARTED
  STARTED
  QUESTIONNAIRE
  COMPLETED
}
