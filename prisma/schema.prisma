// ◮◮◮ GENERATED BY AURORA ◮◮◮
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Page {
  id        String   @id @default(cuid())
  name      String   @unique
  route     String   @unique
  isPublic  Boolean  @default(false)
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique
  users     User[]
  pages     Page[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String              @id @default(cuid())
  isParticipantOf  Study[]             @relation("study-participants")
  studies          Study[]             @relation("study-expert")
  sessionsAsExpert EvaluationSession[] @relation("session-expert")
  sessionsAsUser   EvaluationSession[] @relation("session-user")
  scripts          Script[]
  name             String?
  email            String?             @unique
  emailVerified    DateTime?
  image            String?
  roles            Role[]
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EvaluationSessionData {
  id                      String   @id @default(cuid())
  expertConsentBegin      Boolean  @default(false)
  participantConsentBegin Boolean  @default(false)
  currentTask             Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model EvaluationSession {
  id            String                       @id @default(cuid())
  status        Enum_EvaluationSessionStatus @default(NOT_STARTED)
  study         Study                        @relation(fields: [studyId], references: [id])
  studyId       String
  expert        User                         @relation(fields: [expertId], references: [id], name: "session-expert")
  expertId      String
  participant   User                         @relation(fields: [participantId], references: [id], name: "session-user")
  participantId String
  tasks         EvaluationTask[]
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
}

model EvaluationTask {
  id                  String                    @id @default(cuid())
  status              Enum_TaskEvaluationStatus @default(NOT_STARTED)
  task                Task                      @relation(fields: [taskId], references: [id])
  taskId              String
  session             EvaluationSession         @relation(fields: [evaluationSessionId], references: [id])
  evaluationSessionId String
  expertComments      String?
  userRecording       String?
  expertRecording     String?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
}

model Script {
  id        String   @id @default(cuid())
  name      String   @unique
  script    String   @db.Text
  recording String?
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  studies   Study[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String           @id @default(cuid())
  description String           @db.Text
  url         String
  recording   String?
  study       Study            @relation(fields: [studyId], references: [id])
  studyId     String
  evaluations EvaluationTask[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Study {
  id               String              @id @default(cuid())
  name             String
  site             String
  researchQuestion String
  script           Script              @relation(fields: [scriptId], references: [id])
  scriptId         String
  createdBy        User                @relation(fields: [userId], references: [id], name: "study-expert")
  userId           String              @unique
  participants     User[]              @relation("study-participants")
  sessions         EvaluationSession[]
  tasks            Task[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

enum Enum_RoleName {
  ADMIN
  EXPERT
  PARTICIPANT
}

enum Enum_TaskEvaluationStatus {
  NOT_STARTED
  STARTED
  COMPLETED
  FAILED
}

enum Enum_EvaluationSessionStatus {
  NOT_STARTED
  STARTED
  COMPLETED
}
